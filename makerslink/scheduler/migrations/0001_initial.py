# Generated by Django 2.0.5 on 2018-07-25 17:56

import django.core.files.storage
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_active', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_registration_complete', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a human-friendly name for this type of Event', max_length=50)),
                ('description', models.CharField(blank=True, help_text='Enter a description for this type of Event', max_length=300, null=True)),
                ('start', models.DateTimeField(db_index=True, help_text='Start of event repetition and start time of events')),
                ('end', models.DateTimeField(db_index=True, help_text='End time of events, must be after start')),
                ('repeat_end', models.DateTimeField(blank=True, help_text='Date to end repetition', null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EventInstance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique ID for this bookinginstance', primary_key=True, serialize=False)),
                ('google_calendar_booking_id', models.CharField(blank=True, help_text='Unique ID from google after instance is created', max_length=300, null=True)),
                ('host', models.CharField(blank=True, help_text='Enter a name instead of user-key', max_length=50, null=True)),
                ('start', models.DateTimeField(help_text='Start of event')),
                ('end', models.DateTimeField(help_text='End of event')),
                ('status', models.IntegerField(choices=[(-1, 'Reschedule needed'), (0, 'Unscheduled'), (1, 'Scheduled'), (2, 'Cancelled')], default=0, help_text='Instance status')),
                ('event', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='scheduler.Event')),
            ],
            options={
                'ordering': ['start', 'end'],
            },
        ),
        migrations.CreateModel(
            name='EventTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a human-friendly name for this template', max_length=50)),
                ('title', models.CharField(help_text='Enter title to be used for booking', max_length=100)),
                ('header', models.CharField(blank=True, help_text='Enter a, optional, header for the event to be inserted after the hosts name into the descriptionfield in the calendar event.', max_length=200, null=True)),
                ('body', models.TextField(blank=True, help_text='Enter a larger body of text to be inserted after the header in the description field in the calendar event', max_length=1000, null=True)),
                ('synchronize', models.BooleanField(default=True, help_text='If active, scheduled events will be synced to Google calendar upon creation.')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SchedulingCalendar',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique ID for this calendar', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Enter a human-friendly name for this Google Calendar', max_length=50)),
                ('google_calendar_id', models.CharField(help_text='Enter a calendar id', max_length=250)),
                ('service_account_username', models.CharField(help_text='Enter the username for the service account used', max_length=250)),
                ('timezone', models.CharField(choices=[('Europe/Stockholm', 'Europe/Stockholm')], help_text='Calendar timezone', max_length=50)),
                ('service_account', models.FileField(blank=True, help_text='Upload client_secret json-file', null=True, storage=django.core.files.storage.FileSystemStorage(location='/home/larlin/Projects/MakersLink_Scheduling/pks'), upload_to='')),
                ('scope', models.TextField(default='https://www.googleapis.com/auth/calendar', help_text='Enter scope of api calls, change at your own risk')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SchedulingRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField()),
                ('frequency', models.CharField(choices=[('YEARLY', 'Yearly'), ('MONTHLY', 'Monthly'), ('WEEKLY', 'Weekly'), ('DAILY', 'Daily')], max_length=10, verbose_name='frequency')),
                ('params', models.TextField(blank=True, verbose_name='params')),
            ],
        ),
        migrations.AddField(
            model_name='eventtemplate',
            name='calendar',
            field=models.ForeignKey(help_text='Select the calendar to sync events to.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='scheduler.SchedulingCalendar'),
        ),
        migrations.AddField(
            model_name='event',
            name='rule',
            field=models.ForeignKey(blank=True, help_text="Select '----' for a one time only event.", null=True, on_delete=django.db.models.deletion.SET_NULL, to='scheduler.SchedulingRule'),
        ),
        migrations.AddField(
            model_name='event',
            name='template',
            field=models.ForeignKey(help_text='Select a template for how scheduled Events will look in the calendar.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='scheduler.EventTemplate'),
        ),
    ]
